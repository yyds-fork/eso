external function fetch() -> Future<int>;
external function fetchFailed() -> Future<int>;
function valueFuture() -> Future<int> { return Future.value(3); }

class Test {
  static function f1 () -> Future<int> {
    return fetch();
  }

  static function f2() -> Future<str> {
    return Future.value('test');
  }

  function f3() -> Future<int> {
    return fetch();
  }

  function f4() -> Future<int> async {
    final result = await fetch();
    print(result);
    return result;
  }

  function f5(check: bool) -> Future<int> async {
    if (check) {
      final result = await fetch();
      return result;
    } else {
      return 0;
    }
  }

  function f6() -> Future<int> async {
    final a = Animal();
    final r1 = await Test.f1();
    final r2 = await Test.f2();
    final r3 = await a.fly();
    final result = await fetch();
    print([r1, r2, r3, result]);
    return result;
  }

  function f7() -> Future<int> async {
    final a = Animal();
    final results = await Future.wait([Test.f1(), fetch(), Test.f2(), a.fly()]);
    print(results);
    return fetch();
  }
}

struct Animal {
  function fly() -> Future<int> {
    return fetch();
  }

  // fly: () -> Future<int> { // syntax not work
  //   return fetch();
  // }
}

function test1() async {
  print('before');
  final result = await fetch();
  print('after');
  print(result);
}

function test2() -> Future<int> async {
  print('before');
  final result = await fetch();
  print('after');
  return result;
}

function test3() -> Future<str> async {
  print('before');
  return fetch().then((result) {
    print('after');
    return result.toString() + ' - Three';
  });
}

function test4() -> Future<int> async {
  print('before');
  final result = await fetchFailed();
  print('after');
  return result;
}

function test5() -> Future<int> async {
  print('before');
  final result = await Test.f1();
  print('after');
  return result;
}

function test6() -> Future<str> async {
  print('before');
  final result = await Test.f2();
  print('after');
  return result;
}

function test7() -> Future<int> async {
  final test = Test();
  print('before');
  final result = await test.f3();
  print('after');
  return result;
}

function test8() -> Future<int> async {
  final test = Test();
  print('before');
  final result = await test.f4();
  print('after');
  return result;
}

function test9(check: bool) -> Future<int> async {
  print('arg: ${check}');
  final test = Test();
  print('before');
  final result = await test.f5(check);
  print('after');
  return result;
}

function test10(check: bool) -> Future<int> async {
  print('arg: ${check}');
  final test = Test();
  print('before');
  final result = await test.f6();
  print('after');
  return result;
}

function test11() -> Future<int> async {
  final animal = Animal();
  print('before');
  final result = await animal.fly();
  print('after');
  return result;
}

function test12() -> Future<int> async {
  final test = Test();
  print('before');
  final result = await test.f7();
  print('after');
  return result;
}

function sumAll() -> Future<int> async {
  final results = await Future.wait([valueFuture(), fetch(), Future.value(2), Test.f1()]);
  final sum = results.fold(0, (pre, val) => pre + val); // 11
  return sum;
}

function test13() -> Future<int> async {
  print('step1');
  final sum = await sumAll();
  print('step2');
  final result = await fetch() * await valueFuture() * sum;
  return result;
}

function test14() -> Future<int> async {
  final result = await fetch() * await valueFuture() * await sumAll();
  return result;
}
